// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `formulas.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand {
    fn default() -> &'a FormulaCommand {
        <FormulaCommand as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand {
    pub fn new() -> FormulaCommand {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FormulaCommand {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand {
        FormulaCommand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand>(
                "FormulaCommand",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand::new)
    }
}

impl ::protobuf::Clear for FormulaCommand {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_CurvedCalculation {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_CurvedCalculation {
    fn default() -> &'a FormulaCommand_CurvedCalculation {
        <FormulaCommand_CurvedCalculation as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_CurvedCalculation {
    pub fn new() -> FormulaCommand_CurvedCalculation {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FormulaCommand_CurvedCalculation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_CurvedCalculation {
        FormulaCommand_CurvedCalculation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_CurvedCalculation>(
                "FormulaCommand.CurvedCalculation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_CurvedCalculation {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_CurvedCalculation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_CurvedCalculation::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_CurvedCalculation {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_CurvedCalculation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_CurvedCalculation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_CurvedCalculation_Unlock {
    // message fields
    pub x: i64,
    pub o: i64,
    pub a: i64,
    pub c: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_CurvedCalculation_Unlock {
    fn default() -> &'a FormulaCommand_CurvedCalculation_Unlock {
        <FormulaCommand_CurvedCalculation_Unlock as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_CurvedCalculation_Unlock {
    pub fn new() -> FormulaCommand_CurvedCalculation_Unlock {
        ::std::default::Default::default()
    }

    // int64 x = 1;


    pub fn get_x(&self) -> i64 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i64) {
        self.x = v;
    }

    // int64 o = 2;


    pub fn get_o(&self) -> i64 {
        self.o
    }
    pub fn clear_o(&mut self) {
        self.o = 0;
    }

    // Param is passed by value, moved
    pub fn set_o(&mut self, v: i64) {
        self.o = v;
    }

    // int64 a = 3;


    pub fn get_a(&self) -> i64 {
        self.a
    }
    pub fn clear_a(&mut self) {
        self.a = 0;
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: i64) {
        self.a = v;
    }

    // int64 c = 4;


    pub fn get_c(&self) -> i64 {
        self.c
    }
    pub fn clear_c(&mut self) {
        self.c = 0;
    }

    // Param is passed by value, moved
    pub fn set_c(&mut self, v: i64) {
        self.c = v;
    }
}

impl ::protobuf::Message for FormulaCommand_CurvedCalculation_Unlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.o = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.a = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.c = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::value_size(1, self.x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.o != 0 {
            my_size += ::protobuf::rt::value_size(2, self.o, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.a != 0 {
            my_size += ::protobuf::rt::value_size(3, self.a, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.c != 0 {
            my_size += ::protobuf::rt::value_size(4, self.c, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0 {
            os.write_int64(1, self.x)?;
        }
        if self.o != 0 {
            os.write_int64(2, self.o)?;
        }
        if self.a != 0 {
            os.write_int64(3, self.a)?;
        }
        if self.c != 0 {
            os.write_int64(4, self.c)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_CurvedCalculation_Unlock {
        FormulaCommand_CurvedCalculation_Unlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "x",
                |m: &FormulaCommand_CurvedCalculation_Unlock| { &m.x },
                |m: &mut FormulaCommand_CurvedCalculation_Unlock| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "o",
                |m: &FormulaCommand_CurvedCalculation_Unlock| { &m.o },
                |m: &mut FormulaCommand_CurvedCalculation_Unlock| { &mut m.o },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "a",
                |m: &FormulaCommand_CurvedCalculation_Unlock| { &m.a },
                |m: &mut FormulaCommand_CurvedCalculation_Unlock| { &mut m.a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "c",
                |m: &FormulaCommand_CurvedCalculation_Unlock| { &m.c },
                |m: &mut FormulaCommand_CurvedCalculation_Unlock| { &mut m.c },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_CurvedCalculation_Unlock>(
                "FormulaCommand.CurvedCalculation.Unlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_CurvedCalculation_Unlock {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_CurvedCalculation_Unlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_CurvedCalculation_Unlock::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_CurvedCalculation_Unlock {
    fn clear(&mut self) {
        self.x = 0;
        self.o = 0;
        self.a = 0;
        self.c = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_CurvedCalculation_Unlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_CurvedCalculation_Unlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_CurvedCalculation_EarlyBirds {
    // message fields
    pub c: i64,
    pub a: i64,
    pub b: i64,
    pub d: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_CurvedCalculation_EarlyBirds {
    fn default() -> &'a FormulaCommand_CurvedCalculation_EarlyBirds {
        <FormulaCommand_CurvedCalculation_EarlyBirds as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_CurvedCalculation_EarlyBirds {
    pub fn new() -> FormulaCommand_CurvedCalculation_EarlyBirds {
        ::std::default::Default::default()
    }

    // int64 c = 1;


    pub fn get_c(&self) -> i64 {
        self.c
    }
    pub fn clear_c(&mut self) {
        self.c = 0;
    }

    // Param is passed by value, moved
    pub fn set_c(&mut self, v: i64) {
        self.c = v;
    }

    // int64 a = 2;


    pub fn get_a(&self) -> i64 {
        self.a
    }
    pub fn clear_a(&mut self) {
        self.a = 0;
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: i64) {
        self.a = v;
    }

    // int64 b = 3;


    pub fn get_b(&self) -> i64 {
        self.b
    }
    pub fn clear_b(&mut self) {
        self.b = 0;
    }

    // Param is passed by value, moved
    pub fn set_b(&mut self, v: i64) {
        self.b = v;
    }

    // int64 d = 4;


    pub fn get_d(&self) -> i64 {
        self.d
    }
    pub fn clear_d(&mut self) {
        self.d = 0;
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: i64) {
        self.d = v;
    }
}

impl ::protobuf::Message for FormulaCommand_CurvedCalculation_EarlyBirds {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.c = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.a = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.b = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.d = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.c != 0 {
            my_size += ::protobuf::rt::value_size(1, self.c, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.a != 0 {
            my_size += ::protobuf::rt::value_size(2, self.a, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.b != 0 {
            my_size += ::protobuf::rt::value_size(3, self.b, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.d != 0 {
            my_size += ::protobuf::rt::value_size(4, self.d, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.c != 0 {
            os.write_int64(1, self.c)?;
        }
        if self.a != 0 {
            os.write_int64(2, self.a)?;
        }
        if self.b != 0 {
            os.write_int64(3, self.b)?;
        }
        if self.d != 0 {
            os.write_int64(4, self.d)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_CurvedCalculation_EarlyBirds {
        FormulaCommand_CurvedCalculation_EarlyBirds::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "c",
                |m: &FormulaCommand_CurvedCalculation_EarlyBirds| { &m.c },
                |m: &mut FormulaCommand_CurvedCalculation_EarlyBirds| { &mut m.c },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "a",
                |m: &FormulaCommand_CurvedCalculation_EarlyBirds| { &m.a },
                |m: &mut FormulaCommand_CurvedCalculation_EarlyBirds| { &mut m.a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "b",
                |m: &FormulaCommand_CurvedCalculation_EarlyBirds| { &m.b },
                |m: &mut FormulaCommand_CurvedCalculation_EarlyBirds| { &mut m.b },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "d",
                |m: &FormulaCommand_CurvedCalculation_EarlyBirds| { &m.d },
                |m: &mut FormulaCommand_CurvedCalculation_EarlyBirds| { &mut m.d },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_CurvedCalculation_EarlyBirds>(
                "FormulaCommand.CurvedCalculation.EarlyBirds",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_CurvedCalculation_EarlyBirds {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_CurvedCalculation_EarlyBirds> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_CurvedCalculation_EarlyBirds::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_CurvedCalculation_EarlyBirds {
    fn clear(&mut self) {
        self.c = 0;
        self.a = 0;
        self.b = 0;
        self.d = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_CurvedCalculation_EarlyBirds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_CurvedCalculation_EarlyBirds {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_CurvedCalculation_CalculationResult {
    // message fields
    pub R: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_CurvedCalculation_CalculationResult {
    fn default() -> &'a FormulaCommand_CurvedCalculation_CalculationResult {
        <FormulaCommand_CurvedCalculation_CalculationResult as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_CurvedCalculation_CalculationResult {
    pub fn new() -> FormulaCommand_CurvedCalculation_CalculationResult {
        ::std::default::Default::default()
    }

    // int64 R = 1;


    pub fn get_R(&self) -> i64 {
        self.R
    }
    pub fn clear_R(&mut self) {
        self.R = 0;
    }

    // Param is passed by value, moved
    pub fn set_R(&mut self, v: i64) {
        self.R = v;
    }
}

impl ::protobuf::Message for FormulaCommand_CurvedCalculation_CalculationResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.R = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.R != 0 {
            my_size += ::protobuf::rt::value_size(1, self.R, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.R != 0 {
            os.write_int64(1, self.R)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_CurvedCalculation_CalculationResult {
        FormulaCommand_CurvedCalculation_CalculationResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "R",
                |m: &FormulaCommand_CurvedCalculation_CalculationResult| { &m.R },
                |m: &mut FormulaCommand_CurvedCalculation_CalculationResult| { &mut m.R },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_CurvedCalculation_CalculationResult>(
                "FormulaCommand.CurvedCalculation.CalculationResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_CurvedCalculation_CalculationResult {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_CurvedCalculation_CalculationResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_CurvedCalculation_CalculationResult::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_CurvedCalculation_CalculationResult {
    fn clear(&mut self) {
        self.R = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_CurvedCalculation_CalculationResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_CurvedCalculation_CalculationResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_LinearCalculation {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_LinearCalculation {
    fn default() -> &'a FormulaCommand_LinearCalculation {
        <FormulaCommand_LinearCalculation as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_LinearCalculation {
    pub fn new() -> FormulaCommand_LinearCalculation {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FormulaCommand_LinearCalculation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_LinearCalculation {
        FormulaCommand_LinearCalculation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_LinearCalculation>(
                "FormulaCommand.LinearCalculation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_LinearCalculation {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_LinearCalculation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_LinearCalculation::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_LinearCalculation {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_LinearCalculation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_LinearCalculation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_LinearCalculation_Unnamed {
    // message fields
    pub d: i64,
    pub a: i64,
    pub t: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_LinearCalculation_Unnamed {
    fn default() -> &'a FormulaCommand_LinearCalculation_Unnamed {
        <FormulaCommand_LinearCalculation_Unnamed as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_LinearCalculation_Unnamed {
    pub fn new() -> FormulaCommand_LinearCalculation_Unnamed {
        ::std::default::Default::default()
    }

    // int64 d = 1;


    pub fn get_d(&self) -> i64 {
        self.d
    }
    pub fn clear_d(&mut self) {
        self.d = 0;
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: i64) {
        self.d = v;
    }

    // int64 a = 2;


    pub fn get_a(&self) -> i64 {
        self.a
    }
    pub fn clear_a(&mut self) {
        self.a = 0;
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: i64) {
        self.a = v;
    }

    // int64 t = 3;


    pub fn get_t(&self) -> i64 {
        self.t
    }
    pub fn clear_t(&mut self) {
        self.t = 0;
    }

    // Param is passed by value, moved
    pub fn set_t(&mut self, v: i64) {
        self.t = v;
    }
}

impl ::protobuf::Message for FormulaCommand_LinearCalculation_Unnamed {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.d = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.a = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.t = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.d != 0 {
            my_size += ::protobuf::rt::value_size(1, self.d, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.a != 0 {
            my_size += ::protobuf::rt::value_size(2, self.a, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.t != 0 {
            my_size += ::protobuf::rt::value_size(3, self.t, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.d != 0 {
            os.write_int64(1, self.d)?;
        }
        if self.a != 0 {
            os.write_int64(2, self.a)?;
        }
        if self.t != 0 {
            os.write_int64(3, self.t)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_LinearCalculation_Unnamed {
        FormulaCommand_LinearCalculation_Unnamed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "d",
                |m: &FormulaCommand_LinearCalculation_Unnamed| { &m.d },
                |m: &mut FormulaCommand_LinearCalculation_Unnamed| { &mut m.d },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "a",
                |m: &FormulaCommand_LinearCalculation_Unnamed| { &m.a },
                |m: &mut FormulaCommand_LinearCalculation_Unnamed| { &mut m.a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "t",
                |m: &FormulaCommand_LinearCalculation_Unnamed| { &m.t },
                |m: &mut FormulaCommand_LinearCalculation_Unnamed| { &mut m.t },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_LinearCalculation_Unnamed>(
                "FormulaCommand.LinearCalculation.Unnamed",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_LinearCalculation_Unnamed {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_LinearCalculation_Unnamed> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_LinearCalculation_Unnamed::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_LinearCalculation_Unnamed {
    fn clear(&mut self) {
        self.d = 0;
        self.a = 0;
        self.t = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_LinearCalculation_Unnamed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_LinearCalculation_Unnamed {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_LinearCalculation_ROI {
    // message fields
    pub g: i64,
    pub c: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_LinearCalculation_ROI {
    fn default() -> &'a FormulaCommand_LinearCalculation_ROI {
        <FormulaCommand_LinearCalculation_ROI as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_LinearCalculation_ROI {
    pub fn new() -> FormulaCommand_LinearCalculation_ROI {
        ::std::default::Default::default()
    }

    // int64 g = 1;


    pub fn get_g(&self) -> i64 {
        self.g
    }
    pub fn clear_g(&mut self) {
        self.g = 0;
    }

    // Param is passed by value, moved
    pub fn set_g(&mut self, v: i64) {
        self.g = v;
    }

    // int64 c = 2;


    pub fn get_c(&self) -> i64 {
        self.c
    }
    pub fn clear_c(&mut self) {
        self.c = 0;
    }

    // Param is passed by value, moved
    pub fn set_c(&mut self, v: i64) {
        self.c = v;
    }
}

impl ::protobuf::Message for FormulaCommand_LinearCalculation_ROI {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.g = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.c = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.g != 0 {
            my_size += ::protobuf::rt::value_size(1, self.g, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.c != 0 {
            my_size += ::protobuf::rt::value_size(2, self.c, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.g != 0 {
            os.write_int64(1, self.g)?;
        }
        if self.c != 0 {
            os.write_int64(2, self.c)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_LinearCalculation_ROI {
        FormulaCommand_LinearCalculation_ROI::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "g",
                |m: &FormulaCommand_LinearCalculation_ROI| { &m.g },
                |m: &mut FormulaCommand_LinearCalculation_ROI| { &mut m.g },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "c",
                |m: &FormulaCommand_LinearCalculation_ROI| { &m.c },
                |m: &mut FormulaCommand_LinearCalculation_ROI| { &mut m.c },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_LinearCalculation_ROI>(
                "FormulaCommand.LinearCalculation.ROI",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_LinearCalculation_ROI {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_LinearCalculation_ROI> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_LinearCalculation_ROI::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_LinearCalculation_ROI {
    fn clear(&mut self) {
        self.g = 0;
        self.c = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_LinearCalculation_ROI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_LinearCalculation_ROI {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_LinearCalculation_ARR {
    // message fields
    pub g: i64,
    pub c: i64,
    pub d: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_LinearCalculation_ARR {
    fn default() -> &'a FormulaCommand_LinearCalculation_ARR {
        <FormulaCommand_LinearCalculation_ARR as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_LinearCalculation_ARR {
    pub fn new() -> FormulaCommand_LinearCalculation_ARR {
        ::std::default::Default::default()
    }

    // int64 g = 1;


    pub fn get_g(&self) -> i64 {
        self.g
    }
    pub fn clear_g(&mut self) {
        self.g = 0;
    }

    // Param is passed by value, moved
    pub fn set_g(&mut self, v: i64) {
        self.g = v;
    }

    // int64 c = 2;


    pub fn get_c(&self) -> i64 {
        self.c
    }
    pub fn clear_c(&mut self) {
        self.c = 0;
    }

    // Param is passed by value, moved
    pub fn set_c(&mut self, v: i64) {
        self.c = v;
    }

    // int64 d = 3;


    pub fn get_d(&self) -> i64 {
        self.d
    }
    pub fn clear_d(&mut self) {
        self.d = 0;
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: i64) {
        self.d = v;
    }
}

impl ::protobuf::Message for FormulaCommand_LinearCalculation_ARR {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.g = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.c = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.d = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.g != 0 {
            my_size += ::protobuf::rt::value_size(1, self.g, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.c != 0 {
            my_size += ::protobuf::rt::value_size(2, self.c, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.d != 0 {
            my_size += ::protobuf::rt::value_size(3, self.d, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.g != 0 {
            os.write_int64(1, self.g)?;
        }
        if self.c != 0 {
            os.write_int64(2, self.c)?;
        }
        if self.d != 0 {
            os.write_int64(3, self.d)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_LinearCalculation_ARR {
        FormulaCommand_LinearCalculation_ARR::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "g",
                |m: &FormulaCommand_LinearCalculation_ARR| { &m.g },
                |m: &mut FormulaCommand_LinearCalculation_ARR| { &mut m.g },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "c",
                |m: &FormulaCommand_LinearCalculation_ARR| { &m.c },
                |m: &mut FormulaCommand_LinearCalculation_ARR| { &mut m.c },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "d",
                |m: &FormulaCommand_LinearCalculation_ARR| { &m.d },
                |m: &mut FormulaCommand_LinearCalculation_ARR| { &mut m.d },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_LinearCalculation_ARR>(
                "FormulaCommand.LinearCalculation.ARR",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_LinearCalculation_ARR {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_LinearCalculation_ARR> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_LinearCalculation_ARR::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_LinearCalculation_ARR {
    fn clear(&mut self) {
        self.g = 0;
        self.c = 0;
        self.d = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_LinearCalculation_ARR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_LinearCalculation_ARR {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_LinearCalculation_APR {
    // message fields
    pub r: i64,
    pub n: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_LinearCalculation_APR {
    fn default() -> &'a FormulaCommand_LinearCalculation_APR {
        <FormulaCommand_LinearCalculation_APR as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_LinearCalculation_APR {
    pub fn new() -> FormulaCommand_LinearCalculation_APR {
        ::std::default::Default::default()
    }

    // int64 r = 1;


    pub fn get_r(&self) -> i64 {
        self.r
    }
    pub fn clear_r(&mut self) {
        self.r = 0;
    }

    // Param is passed by value, moved
    pub fn set_r(&mut self, v: i64) {
        self.r = v;
    }

    // int64 n = 2;


    pub fn get_n(&self) -> i64 {
        self.n
    }
    pub fn clear_n(&mut self) {
        self.n = 0;
    }

    // Param is passed by value, moved
    pub fn set_n(&mut self, v: i64) {
        self.n = v;
    }
}

impl ::protobuf::Message for FormulaCommand_LinearCalculation_APR {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.r = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.n = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.r != 0 {
            my_size += ::protobuf::rt::value_size(1, self.r, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.n != 0 {
            my_size += ::protobuf::rt::value_size(2, self.n, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.r != 0 {
            os.write_int64(1, self.r)?;
        }
        if self.n != 0 {
            os.write_int64(2, self.n)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_LinearCalculation_APR {
        FormulaCommand_LinearCalculation_APR::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "r",
                |m: &FormulaCommand_LinearCalculation_APR| { &m.r },
                |m: &mut FormulaCommand_LinearCalculation_APR| { &mut m.r },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "n",
                |m: &FormulaCommand_LinearCalculation_APR| { &m.n },
                |m: &mut FormulaCommand_LinearCalculation_APR| { &mut m.n },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_LinearCalculation_APR>(
                "FormulaCommand.LinearCalculation.APR",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_LinearCalculation_APR {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_LinearCalculation_APR> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_LinearCalculation_APR::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_LinearCalculation_APR {
    fn clear(&mut self) {
        self.r = 0;
        self.n = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_LinearCalculation_APR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_LinearCalculation_APR {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_LinearCalculation_APY {
    // message fields
    pub r: i64,
    pub n: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_LinearCalculation_APY {
    fn default() -> &'a FormulaCommand_LinearCalculation_APY {
        <FormulaCommand_LinearCalculation_APY as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_LinearCalculation_APY {
    pub fn new() -> FormulaCommand_LinearCalculation_APY {
        ::std::default::Default::default()
    }

    // int64 r = 1;


    pub fn get_r(&self) -> i64 {
        self.r
    }
    pub fn clear_r(&mut self) {
        self.r = 0;
    }

    // Param is passed by value, moved
    pub fn set_r(&mut self, v: i64) {
        self.r = v;
    }

    // int64 n = 2;


    pub fn get_n(&self) -> i64 {
        self.n
    }
    pub fn clear_n(&mut self) {
        self.n = 0;
    }

    // Param is passed by value, moved
    pub fn set_n(&mut self, v: i64) {
        self.n = v;
    }
}

impl ::protobuf::Message for FormulaCommand_LinearCalculation_APY {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.r = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.n = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.r != 0 {
            my_size += ::protobuf::rt::value_size(1, self.r, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.n != 0 {
            my_size += ::protobuf::rt::value_size(2, self.n, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.r != 0 {
            os.write_int64(1, self.r)?;
        }
        if self.n != 0 {
            os.write_int64(2, self.n)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_LinearCalculation_APY {
        FormulaCommand_LinearCalculation_APY::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "r",
                |m: &FormulaCommand_LinearCalculation_APY| { &m.r },
                |m: &mut FormulaCommand_LinearCalculation_APY| { &mut m.r },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "n",
                |m: &FormulaCommand_LinearCalculation_APY| { &m.n },
                |m: &mut FormulaCommand_LinearCalculation_APY| { &mut m.n },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_LinearCalculation_APY>(
                "FormulaCommand.LinearCalculation.APY",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_LinearCalculation_APY {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_LinearCalculation_APY> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_LinearCalculation_APY::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_LinearCalculation_APY {
    fn clear(&mut self) {
        self.r = 0;
        self.n = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_LinearCalculation_APY {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_LinearCalculation_APY {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_LinearCalculation_TVL {
    // message fields
    pub p: i64,
    pub n: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_LinearCalculation_TVL {
    fn default() -> &'a FormulaCommand_LinearCalculation_TVL {
        <FormulaCommand_LinearCalculation_TVL as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_LinearCalculation_TVL {
    pub fn new() -> FormulaCommand_LinearCalculation_TVL {
        ::std::default::Default::default()
    }

    // int64 p = 1;


    pub fn get_p(&self) -> i64 {
        self.p
    }
    pub fn clear_p(&mut self) {
        self.p = 0;
    }

    // Param is passed by value, moved
    pub fn set_p(&mut self, v: i64) {
        self.p = v;
    }

    // int64 n = 2;


    pub fn get_n(&self) -> i64 {
        self.n
    }
    pub fn clear_n(&mut self) {
        self.n = 0;
    }

    // Param is passed by value, moved
    pub fn set_n(&mut self, v: i64) {
        self.n = v;
    }
}

impl ::protobuf::Message for FormulaCommand_LinearCalculation_TVL {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.p = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.n = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.p != 0 {
            my_size += ::protobuf::rt::value_size(1, self.p, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.n != 0 {
            my_size += ::protobuf::rt::value_size(2, self.n, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.p != 0 {
            os.write_int64(1, self.p)?;
        }
        if self.n != 0 {
            os.write_int64(2, self.n)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_LinearCalculation_TVL {
        FormulaCommand_LinearCalculation_TVL::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "p",
                |m: &FormulaCommand_LinearCalculation_TVL| { &m.p },
                |m: &mut FormulaCommand_LinearCalculation_TVL| { &mut m.p },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "n",
                |m: &FormulaCommand_LinearCalculation_TVL| { &m.n },
                |m: &mut FormulaCommand_LinearCalculation_TVL| { &mut m.n },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_LinearCalculation_TVL>(
                "FormulaCommand.LinearCalculation.TVL",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_LinearCalculation_TVL {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_LinearCalculation_TVL> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_LinearCalculation_TVL::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_LinearCalculation_TVL {
    fn clear(&mut self) {
        self.p = 0;
        self.n = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_LinearCalculation_TVL {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_LinearCalculation_TVL {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FormulaCommand_LinearCalculation_CalculationResult {
    // message fields
    pub R: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FormulaCommand_LinearCalculation_CalculationResult {
    fn default() -> &'a FormulaCommand_LinearCalculation_CalculationResult {
        <FormulaCommand_LinearCalculation_CalculationResult as ::protobuf::Message>::default_instance()
    }
}

impl FormulaCommand_LinearCalculation_CalculationResult {
    pub fn new() -> FormulaCommand_LinearCalculation_CalculationResult {
        ::std::default::Default::default()
    }

    // int64 R = 1;


    pub fn get_R(&self) -> i64 {
        self.R
    }
    pub fn clear_R(&mut self) {
        self.R = 0;
    }

    // Param is passed by value, moved
    pub fn set_R(&mut self, v: i64) {
        self.R = v;
    }
}

impl ::protobuf::Message for FormulaCommand_LinearCalculation_CalculationResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.R = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.R != 0 {
            my_size += ::protobuf::rt::value_size(1, self.R, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.R != 0 {
            os.write_int64(1, self.R)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FormulaCommand_LinearCalculation_CalculationResult {
        FormulaCommand_LinearCalculation_CalculationResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "R",
                |m: &FormulaCommand_LinearCalculation_CalculationResult| { &m.R },
                |m: &mut FormulaCommand_LinearCalculation_CalculationResult| { &mut m.R },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FormulaCommand_LinearCalculation_CalculationResult>(
                "FormulaCommand.LinearCalculation.CalculationResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FormulaCommand_LinearCalculation_CalculationResult {
        static instance: ::protobuf::rt::LazyV2<FormulaCommand_LinearCalculation_CalculationResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FormulaCommand_LinearCalculation_CalculationResult::new)
    }
}

impl ::protobuf::Clear for FormulaCommand_LinearCalculation_CalculationResult {
    fn clear(&mut self) {
        self.R = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FormulaCommand_LinearCalculation_CalculationResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FormulaCommand_LinearCalculation_CalculationResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eformulas.proto\x12\x08formulas\"\xfc\x03\n\x0eFormulaCommand\x1a\
    \xbe\x01\n\x11CurvedCalculation\x1a@\n\x06Unlock\x12\x0c\n\x01x\x18\x01\
    \x20\x01(\x03R\x01x\x12\x0c\n\x01o\x18\x02\x20\x01(\x03R\x01o\x12\x0c\n\
    \x01a\x18\x03\x20\x01(\x03R\x01a\x12\x0c\n\x01c\x18\x04\x20\x01(\x03R\
    \x01c\x1aD\n\nEarlyBirds\x12\x0c\n\x01c\x18\x01\x20\x01(\x03R\x01c\x12\
    \x0c\n\x01a\x18\x02\x20\x01(\x03R\x01a\x12\x0c\n\x01b\x18\x03\x20\x01(\
    \x03R\x01b\x12\x0c\n\x01d\x18\x04\x20\x01(\x03R\x01d\x1a!\n\x11Calculati\
    onResult\x12\x0c\n\x01R\x18\x01\x20\x01(\x03R\x01R\x1a\xa8\x02\n\x11Line\
    arCalculation\x1a3\n\x07Unnamed\x12\x0c\n\x01d\x18\x01\x20\x01(\x03R\x01\
    d\x12\x0c\n\x01a\x18\x02\x20\x01(\x03R\x01a\x12\x0c\n\x01t\x18\x03\x20\
    \x01(\x03R\x01t\x1a!\n\x03ROI\x12\x0c\n\x01g\x18\x01\x20\x01(\x03R\x01g\
    \x12\x0c\n\x01c\x18\x02\x20\x01(\x03R\x01c\x1a/\n\x03ARR\x12\x0c\n\x01g\
    \x18\x01\x20\x01(\x03R\x01g\x12\x0c\n\x01c\x18\x02\x20\x01(\x03R\x01c\
    \x12\x0c\n\x01d\x18\x03\x20\x01(\x03R\x01d\x1a!\n\x03APR\x12\x0c\n\x01r\
    \x18\x01\x20\x01(\x03R\x01r\x12\x0c\n\x01n\x18\x02\x20\x01(\x03R\x01n\
    \x1a!\n\x03APY\x12\x0c\n\x01r\x18\x01\x20\x01(\x03R\x01r\x12\x0c\n\x01n\
    \x18\x02\x20\x01(\x03R\x01n\x1a!\n\x03TVL\x12\x0c\n\x01p\x18\x01\x20\x01\
    (\x03R\x01p\x12\x0c\n\x01n\x18\x02\x20\x01(\x03R\x01n\x1a!\n\x11Calculat\
    ionResult\x12\x0c\n\x01R\x18\x01\x20\x01(\x03R\x01RJ\xec\x1f\n\x06\x12\
    \x04\0\0b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x01\0\x11\n_\n\x02\x04\0\x12\x04\x05\0b\x01\x1a2\x20Formula\x20commands\
    \x20represent\x20formula\x20input\x20objects\x20\"\x1f\x20R\x20=\x20c\
    \x20-\x20(a/((x\xe2\x80\x99-o)+(a/c))))\x20\n\n\n\x03\x04\0\x01\x12\x03\
    \x05\x08\x16\n\x0c\n\x04\x04\0\x03\0\x12\x04\x08\x04\x1e\x05\n\x0c\n\x05\
    \x04\0\x03\0\x01\x12\x03\x08\x0c\x1d\n\x20\n\x06\x04\0\x03\0\x03\0\x12\
    \x04\n\x08\x0f\t\x1a\x10\x20Unlock\x20formula\x20\n\x0e\n\x07\x04\0\x03\
    \0\x03\0\x01\x12\x03\n\x10\x16\n0\n\x08\x04\0\x03\0\x03\0\x02\0\x12\x03\
    \x0b\x0c\x18\"\x1f\x20x\xe2\x80\x99\x20=\x20current\x20unix\x20timestamp\
    \n\n\x10\n\t\x04\0\x03\0\x03\0\x02\0\x05\x12\x03\x0b\x0c\x11\n\x10\n\t\
    \x04\0\x03\0\x03\0\x02\0\x01\x12\x03\x0b\x12\x13\n\x10\n\t\x04\0\x03\0\
    \x03\0\x02\0\x03\x12\x03\x0b\x16\x17\n+\n\x08\x04\0\x03\0\x03\0\x02\x01\
    \x12\x03\x0c\x0c\x18\"\x1a\x20o\x20=\x20start\x20unix\x20timestamp\n\n\
    \x10\n\t\x04\0\x03\0\x03\0\x02\x01\x05\x12\x03\x0c\x0c\x11\n\x10\n\t\x04\
    \0\x03\0\x03\0\x02\x01\x01\x12\x03\x0c\x12\x13\n\x10\n\t\x04\0\x03\0\x03\
    \0\x02\x01\x03\x12\x03\x0c\x16\x17\n\x1f\n\x08\x04\0\x03\0\x03\0\x02\x02\
    \x12\x03\r\x0c\x18\"\x0e\x20a\x20=\x20constant\n\n\x10\n\t\x04\0\x03\0\
    \x03\0\x02\x02\x05\x12\x03\r\x0c\x11\n\x10\n\t\x04\0\x03\0\x03\0\x02\x02\
    \x01\x12\x03\r\x12\x13\n\x10\n\t\x04\0\x03\0\x03\0\x02\x02\x03\x12\x03\r\
    \x16\x17\n!\n\x08\x04\0\x03\0\x03\0\x02\x03\x12\x03\x0e\x0c\x18\"\x10\
    \x20c\x20=\x20allocation\n\n\x10\n\t\x04\0\x03\0\x03\0\x02\x03\x05\x12\
    \x03\x0e\x0c\x11\n\x10\n\t\x04\0\x03\0\x03\0\x02\x03\x01\x12\x03\x0e\x12\
    \x13\n\x10\n\t\x04\0\x03\0\x03\0\x02\x03\x03\x12\x03\x0e\x16\x17\n0\n\
    \x06\x04\0\x03\0\x03\x01\x12\x04\x13\x08\x18\t\x1a\x11\x20R\x20=\x20c\
    \x20-\x20(a/d+b)\x202\r\x20Early\x20Birds\x20\n\x0e\n\x07\x04\0\x03\0\
    \x03\x01\x01\x12\x03\x13\x10\x1a\n\x0f\n\x08\x04\0\x03\0\x03\x01\x02\0\
    \x12\x03\x14\x0c\x18\n\x10\n\t\x04\0\x03\0\x03\x01\x02\0\x05\x12\x03\x14\
    \x0c\x11\n\x10\n\t\x04\0\x03\0\x03\x01\x02\0\x01\x12\x03\x14\x12\x13\n\
    \x10\n\t\x04\0\x03\0\x03\x01\x02\0\x03\x12\x03\x14\x16\x17\n\x0f\n\x08\
    \x04\0\x03\0\x03\x01\x02\x01\x12\x03\x15\x0c\x18\n\x10\n\t\x04\0\x03\0\
    \x03\x01\x02\x01\x05\x12\x03\x15\x0c\x11\n\x10\n\t\x04\0\x03\0\x03\x01\
    \x02\x01\x01\x12\x03\x15\x12\x13\n\x10\n\t\x04\0\x03\0\x03\x01\x02\x01\
    \x03\x12\x03\x15\x16\x17\n\x0f\n\x08\x04\0\x03\0\x03\x01\x02\x02\x12\x03\
    \x16\x0c\x18\n\x10\n\t\x04\0\x03\0\x03\x01\x02\x02\x05\x12\x03\x16\x0c\
    \x11\n\x10\n\t\x04\0\x03\0\x03\x01\x02\x02\x01\x12\x03\x16\x12\x13\n\x10\
    \n\t\x04\0\x03\0\x03\x01\x02\x02\x03\x12\x03\x16\x16\x17\n\x0f\n\x08\x04\
    \0\x03\0\x03\x01\x02\x03\x12\x03\x17\x0c\x18\n\x10\n\t\x04\0\x03\0\x03\
    \x01\x02\x03\x05\x12\x03\x17\x0c\x11\n\x10\n\t\x04\0\x03\0\x03\x01\x02\
    \x03\x01\x12\x03\x17\x12\x13\n\x10\n\t\x04\0\x03\0\x03\x01\x02\x03\x03\
    \x12\x03\x17\x16\x17\n\x13\n\x06\x04\0\x03\0\x03\x02\x12\x04\x1b\x08\x1d\
    \t\x1a\x03\x20R\x20\n\x0e\n\x07\x04\0\x03\0\x03\x02\x01\x12\x03\x1b\x10!\
    \n\x0f\n\x08\x04\0\x03\0\x03\x02\x02\0\x12\x03\x1c\x0c\x18\n\x10\n\t\x04\
    \0\x03\0\x03\x02\x02\0\x05\x12\x03\x1c\x0c\x11\n\x10\n\t\x04\0\x03\0\x03\
    \x02\x02\0\x01\x12\x03\x1c\x12\x13\n\x10\n\t\x04\0\x03\0\x03\x02\x02\0\
    \x03\x12\x03\x1c\x16\x17\n\x0c\n\x04\x04\0\x03\x01\x12\x04\x20\x04a\x05\
    \n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\x20\x0c\x1d\n\x1f\n\x06\x04\0\x03\
    \x01\x03\0\x12\x04\"\x08&\t\x1a\x0f\x20R\x20=\x20d\x20*\x20(a/t)\x20\n\
    \x0e\n\x07\x04\0\x03\x01\x03\0\x01\x12\x03\"\x10\x17\n.\n\x08\x04\0\x03\
    \x01\x03\0\x02\0\x12\x03#\x0c\x18\"\x1d\x20d\x20=\x20unix\x20timestamp\
    \x20duration\n\n\x10\n\t\x04\0\x03\x01\x03\0\x02\0\x05\x12\x03#\x0c\x11\
    \n\x10\n\t\x04\0\x03\x01\x03\0\x02\0\x01\x12\x03#\x12\x13\n\x10\n\t\x04\
    \0\x03\x01\x03\0\x02\0\x03\x12\x03#\x16\x17\n\x1d\n\x08\x04\0\x03\x01\
    \x03\0\x02\x01\x12\x03$\x0c\x18\"\x0c\x20a\x20=\x20amount\n\n\x10\n\t\
    \x04\0\x03\x01\x03\0\x02\x01\x05\x12\x03$\x0c\x11\n\x10\n\t\x04\0\x03\
    \x01\x03\0\x02\x01\x01\x12\x03$\x12\x13\n\x10\n\t\x04\0\x03\x01\x03\0\
    \x02\x01\x03\x12\x03$\x16\x17\n)\n\x08\x04\0\x03\x01\x03\0\x02\x02\x12\
    \x03%\x0c\x18\"\x18\x20t\x20=\x20time\x20to\x20pay\x20amount\n\n\x10\n\t\
    \x04\0\x03\x01\x03\0\x02\x02\x05\x12\x03%\x0c\x11\n\x10\n\t\x04\0\x03\
    \x01\x03\0\x02\x02\x01\x12\x03%\x12\x13\n\x10\n\t\x04\0\x03\x01\x03\0\
    \x02\x02\x03\x12\x03%\x16\x17\n\xd7\x01\n\x06\x04\0\x03\x01\x03\x01\x12\
    \x04.\x081\t\x1a\xa4\x01\nuser\x20with\x20a\x20$5000\x20investment\x20an\
    d\x20a\x2010%\x20share\x20in\x20a\x20farm\x20that\x20distributes\x20$100\
    0\x20per\x20day\x20will\x20receive\x2010%\x20of\x20365,000\x20=\x2036500\
    \nROI\x20=\x20100\x20*\x20(36500\x20-\x205000)\x20/\x205000\x20=\x20630%\
    \n2\x05\x20ROI\x202\x19\x20ROI\x20=\x20100\x20*\x20(g\x20-\x20c)\x20/\
    \x20c\x20\n\x0e\n\x07\x04\0\x03\x01\x03\x01\x01\x12\x03.\x10\x13\n+\n\
    \x08\x04\0\x03\x01\x03\x01\x02\0\x12\x03/\x0c\x18\"\x1a\x20g\x20=\x20gai\
    n\x20from\x20investment\n\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\0\x05\x12\
    \x03/\x0c\x11\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\0\x01\x12\x03/\x12\x13\
    \n\x10\n\t\x04\0\x03\x01\x03\x01\x02\0\x03\x12\x03/\x16\x17\n)\n\x08\x04\
    \0\x03\x01\x03\x01\x02\x01\x12\x030\x0c\x18\"\x18\x20c\x20=\x20cost\x20o\
    f\x20investment\n\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\x01\x05\x12\x030\
    \x0c\x11\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\x01\x01\x12\x030\x12\x13\n\
    \x10\n\t\x04\0\x03\x01\x03\x01\x02\x01\x03\x12\x030\x16\x17\n\x86\x05\n\
    \x06\x04\0\x03\x01\x03\x02\x12\x04=\x08A\t\x1a\xba\x04\nafter\x20a\x20mo\
    nth,\x20user\x20with\x20a\x20$5000\x20investment\x20and\x20a\x2010%\x20s\
    hare\x20in\x20a\x20farm\x20that\x20distributes\x20$1000\x20per\x20day\
    \x20will\x20receive\x2010%\x20of\x20365,000\x20=\x2036500\nARR\x20=\x201\
    00\x20*\x20(((36500\x20-\x205000)\x20/\x205000)^(2)-1\x20=\x203800%\naft\
    er\x20one\x20year,\x20user\x20with\x20a\x20$5000\x20investment\x20and\
    \x20a\x2010%\x20share\x20in\x20a\x20farm\x20that\x20distributes\x20$1000\
    \x20per\x20day\x20will\x20receive\x2010%\x20of\x20365,000\x20=\x2036500\
    \nARR\x20=\x20100\x20*\x20(((36500\x20-\x205000)\x20/\x205000)^(1/1)-1\
    \x20=\x20530%\nafter\x20two\x20years,\x20user\x20with\x20a\x20$5000\x20i\
    nvestment\x20and\x20a\x2010%\x20share\x20in\x20a\x20farm\x20that\x20dist\
    ributes\x20$1000\x20per\x20day\x20will\x20receive\x2010%\x20of\x20730,00\
    0\x20=\x2073000\nARR\x20=\x20100\x20*\x20((73000\x20-\x205000))\x20/\x20\
    5000)^(1/2)-1\x20=\x20268%\n2\x16\x20ROI\x20annualized\x20(ARR)\x202!\
    \x20ARR\x20=\x20100\x20*\x20([(g-c)/c]^(1/d)-1)\x20\n\x0e\n\x07\x04\0\
    \x03\x01\x03\x02\x01\x12\x03=\x10\x13\n+\n\x08\x04\0\x03\x01\x03\x02\x02\
    \0\x12\x03>\x0c\x18\"\x1a\x20g\x20=\x20gain\x20from\x20investment\n\n\
    \x10\n\t\x04\0\x03\x01\x03\x02\x02\0\x05\x12\x03>\x0c\x11\n\x10\n\t\x04\
    \0\x03\x01\x03\x02\x02\0\x01\x12\x03>\x12\x13\n\x10\n\t\x04\0\x03\x01\
    \x03\x02\x02\0\x03\x12\x03>\x16\x17\n)\n\x08\x04\0\x03\x01\x03\x02\x02\
    \x01\x12\x03?\x0c\x18\"\x18\x20c\x20=\x20cost\x20of\x20investment\n\n\
    \x10\n\t\x04\0\x03\x01\x03\x02\x02\x01\x05\x12\x03?\x0c\x11\n\x10\n\t\
    \x04\0\x03\x01\x03\x02\x02\x01\x01\x12\x03?\x12\x13\n\x10\n\t\x04\0\x03\
    \x01\x03\x02\x02\x01\x03\x12\x03?\x16\x17\n%\n\x08\x04\0\x03\x01\x03\x02\
    \x02\x02\x12\x03@\x0c\x18\"\x14\x20d\x20=\x20holding\x20period\n\n\x10\n\
    \t\x04\0\x03\x01\x03\x02\x02\x02\x05\x12\x03@\x0c\x11\n\x10\n\t\x04\0\
    \x03\x01\x03\x02\x02\x02\x01\x12\x03@\x12\x13\n\x10\n\t\x04\0\x03\x01\
    \x03\x02\x02\x02\x03\x12\x03@\x16\x17\n\xb1\x01\n\x06\x04\0\x03\x01\x03\
    \x03\x12\x04H\x08K\t\x1ar\nA\x20credit\x20card\x20company\x20might\x20ch\
    arge\x201%\x20interest\x20each\x20month.\x20Therefore,\x20the\x20APR\x20\
    equals\x2012%\x20(1%\x20x\x2012\x20months\x20=\x2012%).\n2\x1e\x20APR\
    \x20-\x20annual\x20percentage\x20rate\x202\r\x20APR\x20=\x20r\x20*\x20n\
    \x20\n\x0e\n\x07\x04\0\x03\x01\x03\x03\x01\x12\x03H\x10\x13\n$\n\x08\x04\
    \0\x03\x01\x03\x03\x02\0\x12\x03I\x0c\x18\"\x13\x20r\x20=\x20periodic\
    \x20rate\n\n\x10\n\t\x04\0\x03\x01\x03\x03\x02\0\x05\x12\x03I\x0c\x11\n\
    \x10\n\t\x04\0\x03\x01\x03\x03\x02\0\x01\x12\x03I\x12\x13\n\x10\n\t\x04\
    \0\x03\x01\x03\x03\x02\0\x03\x12\x03I\x16\x17\n2\n\x08\x04\0\x03\x01\x03\
    \x03\x02\x01\x12\x03J\x0c\x18\"!\x20n\x20=\x20number\x20of\x20periods\
    \x20in\x20a\x20year\n\n\x10\n\t\x04\0\x03\x01\x03\x03\x02\x01\x05\x12\
    \x03J\x0c\x11\n\x10\n\t\x04\0\x03\x01\x03\x03\x02\x01\x01\x12\x03J\x12\
    \x13\n\x10\n\t\x04\0\x03\x01\x03\x03\x02\x01\x03\x12\x03J\x16\x17\n\x9d\
    \x01\n\x06\x04\0\x03\x01\x03\x04\x12\x04P\x08S\t\x1am\x20The\x20APY\x20f\
    or\x20a\x201%\x20rate\x20of\x20interest\x20compounded\x20monthly\x20woul\
    d\x20be\x2012.68%\x20[(1\x20+\x200.01)^12\x20\xe2\x80\x93\x201\x20=\x201\
    2.68%]\x20a\x20year.\x202\x05\x20APY\x202\x17\x20APY\x20=\x20(1\x20+\x20\
    r)^n\x20\xe2\x80\x93\x201\x20\n\x0e\n\x07\x04\0\x03\x01\x03\x04\x01\x12\
    \x03P\x10\x13\n$\n\x08\x04\0\x03\x01\x03\x04\x02\0\x12\x03Q\x0c\x18\"\
    \x13\x20r\x20=\x20periodic\x20rate\n\n\x10\n\t\x04\0\x03\x01\x03\x04\x02\
    \0\x05\x12\x03Q\x0c\x11\n\x10\n\t\x04\0\x03\x01\x03\x04\x02\0\x01\x12\
    \x03Q\x12\x13\n\x10\n\t\x04\0\x03\x01\x03\x04\x02\0\x03\x12\x03Q\x16\x17\
    \n2\n\x08\x04\0\x03\x01\x03\x04\x02\x01\x12\x03R\x0c\x18\"!\x20n\x20=\
    \x20number\x20of\x20periods\x20in\x20a\x20year\n\n\x10\n\t\x04\0\x03\x01\
    \x03\x04\x02\x01\x05\x12\x03R\x0c\x11\n\x10\n\t\x04\0\x03\x01\x03\x04\
    \x02\x01\x01\x12\x03R\x12\x13\n\x10\n\t\x04\0\x03\x01\x03\x04\x02\x01\
    \x03\x12\x03R\x16\x17\n\xa8\x01\n\x06\x04\0\x03\x01\x03\x05\x12\x04X\x08\
    [\t\x1am\x20The\x20APY\x20for\x20a\x201%\x20rate\x20of\x20interest\x20co\
    mpounded\x20monthly\x20would\x20be\x2012.68%\x20[(1\x20+\x200.01)^12\x20\
    \xe2\x80\x93\x201\x20=\x2012.68%]\x20a\x20year.\x202\x1a\x20TVL\x20=\x20\
    total\x20value\x20locked\x202\r\x20TVL\x20=\x20p\x20*\x20n\x20\n\x0e\n\
    \x07\x04\0\x03\x01\x03\x05\x01\x12\x03X\x10\x13\n:\n\x08\x04\0\x03\x01\
    \x03\x05\x02\0\x12\x03Y\x0c\x18\")\x20p\x20=\x20price\x20of\x20locked\
    \x20tokens\x20in\x20$\x20or\x20GTON\n\n\x10\n\t\x04\0\x03\x01\x03\x05\
    \x02\0\x05\x12\x03Y\x0c\x11\n\x10\n\t\x04\0\x03\x01\x03\x05\x02\0\x01\
    \x12\x03Y\x12\x13\n\x10\n\t\x04\0\x03\x01\x03\x05\x02\0\x03\x12\x03Y\x16\
    \x17\n.\n\x08\x04\0\x03\x01\x03\x05\x02\x01\x12\x03Z\x0c\x18\"\x1d\x20n\
    \x20=\x20amount\x20of\x20locked\x20tokens\n\n\x10\n\t\x04\0\x03\x01\x03\
    \x05\x02\x01\x05\x12\x03Z\x0c\x11\n\x10\n\t\x04\0\x03\x01\x03\x05\x02\
    \x01\x01\x12\x03Z\x12\x13\n\x10\n\t\x04\0\x03\x01\x03\x05\x02\x01\x03\
    \x12\x03Z\x16\x17\n\x13\n\x06\x04\0\x03\x01\x03\x06\x12\x04^\x08`\t\x1a\
    \x03\x20R\x20\n\x0e\n\x07\x04\0\x03\x01\x03\x06\x01\x12\x03^\x10!\n\x0f\
    \n\x08\x04\0\x03\x01\x03\x06\x02\0\x12\x03_\x0c\x18\n\x10\n\t\x04\0\x03\
    \x01\x03\x06\x02\0\x05\x12\x03_\x0c\x11\n\x10\n\t\x04\0\x03\x01\x03\x06\
    \x02\0\x01\x12\x03_\x12\x13\n\x10\n\t\x04\0\x03\x01\x03\x06\x02\0\x03\
    \x12\x03_\x16\x17b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
