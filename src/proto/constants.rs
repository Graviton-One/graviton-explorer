// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `constants.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TimestampDuration {
    YEAR = 0,
    SIX_MONTHS = 2,
    FOUR_WEEKS = 3,
    TWO_WEEKS = 4,
    ONE_WEEK = 5,
    FIVE_DAYS = 6,
    ONE_DAY = 7,
}

impl ::protobuf::ProtobufEnum for TimestampDuration {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TimestampDuration> {
        match value {
            0 => ::std::option::Option::Some(TimestampDuration::YEAR),
            2 => ::std::option::Option::Some(TimestampDuration::SIX_MONTHS),
            3 => ::std::option::Option::Some(TimestampDuration::FOUR_WEEKS),
            4 => ::std::option::Option::Some(TimestampDuration::TWO_WEEKS),
            5 => ::std::option::Option::Some(TimestampDuration::ONE_WEEK),
            6 => ::std::option::Option::Some(TimestampDuration::FIVE_DAYS),
            7 => ::std::option::Option::Some(TimestampDuration::ONE_DAY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TimestampDuration] = &[
            TimestampDuration::YEAR,
            TimestampDuration::SIX_MONTHS,
            TimestampDuration::FOUR_WEEKS,
            TimestampDuration::TWO_WEEKS,
            TimestampDuration::ONE_WEEK,
            TimestampDuration::FIVE_DAYS,
            TimestampDuration::ONE_DAY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TimestampDuration>("TimestampDuration", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TimestampDuration {
}

impl ::std::default::Default for TimestampDuration {
    fn default() -> Self {
        TimestampDuration::YEAR
    }
}

impl ::protobuf::reflect::ProtobufValue for TimestampDuration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fconstants.proto\x12\tconstants*v\n\x11TimestampDuration\x12\x08\n\
    \x04YEAR\x10\0\x12\x0e\n\nSIX_MONTHS\x10\x02\x12\x0e\n\nFOUR_WEEKS\x10\
    \x03\x12\r\n\tTWO_WEEKS\x10\x04\x12\x0c\n\x08ONE_WEEK\x10\x05\x12\r\n\tF\
    IVE_DAYS\x10\x06\x12\x0b\n\x07ONE_DAY\x10\x07J\xd3\x02\n\x06\x12\x04\0\0\
    \x0c\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\
    \x12\n\n\n\x02\x05\0\x12\x04\x04\0\x0c\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x04\x05\x16\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x04\r\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03\x05\x04\x08\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x05\
    \x0b\x0c\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x04\x13\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x06\x04\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x06\x11\x12\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x07\x04\x13\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03\x07\x04\x0e\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03\x07\x11\x12\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x08\x04\x12\n\x0c\n\
    \x05\x05\0\x02\x03\x01\x12\x03\x08\x04\r\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03\x08\x10\x11\n\x0b\n\x04\x05\0\x02\x04\x12\x03\t\x04\x11\n\x0c\n\
    \x05\x05\0\x02\x04\x01\x12\x03\t\x04\x0c\n\x0c\n\x05\x05\0\x02\x04\x02\
    \x12\x03\t\x0f\x10\n\x0b\n\x04\x05\0\x02\x05\x12\x03\n\x04\x12\n\x0c\n\
    \x05\x05\0\x02\x05\x01\x12\x03\n\x04\r\n\x0c\n\x05\x05\0\x02\x05\x02\x12\
    \x03\n\x10\x11\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x0b\x04\x10\n\x0c\n\x05\
    \x05\0\x02\x06\x01\x12\x03\x0b\x04\x0b\n\x0c\n\x05\x05\0\x02\x06\x02\x12\
    \x03\x0b\x0e\x0fb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
